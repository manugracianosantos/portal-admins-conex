// src/main.ts

// Importa as dependÃªncias principais do NestJS
import { NestFactory } from "@nestjs/core"
import { ValidationPipe } from "@nestjs/common"
import { SwaggerModule, DocumentBuilder } from "@nestjs/swagger"
import { AppModule } from "./app.module" // MÃ³dulo raiz da aplicaÃ§Ã£o

async function bootstrap() {
  // ðŸ”¹ Cria a instÃ¢ncia principal do aplicativo Nest
  const app = await NestFactory.create(AppModule)

  // ðŸ”¹ Define um prefixo global para as rotas (opcional, mas organizado)
  // Isso faz com que todas as rotas comecem com /api (ex: /api/users)
  app.setGlobalPrefix("api")

  // ðŸ”¹ ConfiguraÃ§Ã£o de CORS (permite que o frontend acesse a API)
  app.enableCors({
    origin: process.env.CORS_ORIGIN || ["http://localhost:3000", "http://localhost:3001"],
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept"],
    credentials: true, // permite cookies, tokens, etc.
  })

  // ðŸ”¹ Ativa o ValidationPipe global (validaÃ§Ã£o automÃ¡tica dos DTOs)
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,            // remove propriedades nÃ£o declaradas nos DTOs
      forbidNonWhitelisted: true, // lanÃ§a erro se houver campos indevidos
      transform: true,            // converte tipos automaticamente (string â†’ number, etc.)
    }),
  )

  // ðŸ”¹ ConfiguraÃ§Ã£o do Swagger (documentaÃ§Ã£o interativa da API)
  const config = new DocumentBuilder()
    .setTitle("Conex Admin API") // tÃ­tulo que aparece na pÃ¡gina do Swagger
    .setDescription("API documentation for Conex Administrator Portal") // descriÃ§Ã£o da API
    .setVersion("1.0") // versÃ£o do seu backend
    .addBearerAuth() // adiciona suporte para autenticaÃ§Ã£o via token (Bearer)
    .build()

  // Cria o documento do Swagger com base nas configuraÃ§Ãµes acima
  const document = SwaggerModule.createDocument(app, config)

  // Define a rota onde a documentaÃ§Ã£o estarÃ¡ disponÃ­vel
  SwaggerModule.setup("api/docs", app, document)

  // ðŸ”¹ Define a porta do servidor (usa variÃ¡vel de ambiente se existir)
  const port = process.env.PORT || 3001

  // ðŸ”¹ Inicia o servidor
  await app.listen(port)

  // ðŸ”¹ Exibe mensagens amigÃ¡veis no terminal
  console.log(`ðŸš€ Application is running on: http://localhost:${port}/api`)
  console.log(`ðŸ“š Swagger documentation: http://localhost:${port}/api/docs`)
  console.log('JWT_SECRET:', process.env.JWT_SECRET);
}

// Executa a funÃ§Ã£o principal
bootstrap()
